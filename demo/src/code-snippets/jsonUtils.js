/**
 * Generated by github copilot.
 * @param {object} o 
 * @returns fattened json
 */
export function flattenJson(o) {
    var result = {};
    function recurse(cur, prop) {
        if (Object(cur) !== cur) {
            result[prop] = cur;
        } else if (Array.isArray(cur)) {
            for (var i = 0, l = cur.length; i < l; i++) {
                recurse(cur[i], prop + "[" + i + "]");
            }
        if (l === 0) {
            result[prop] = [];
        }
        } else {
            var isEmpty = true;
            for (var p in cur) {
                isEmpty = false;
                recurse(cur[p], prop ? prop + "." + p : p);
            }
            if (isEmpty) {
                result[prop] = {};
            }
        }
    }
    recurse(o, "");
    return result;
}
/**
 * Generated by chatGPT.
 * @param {*} obj 
 * @param {*} prefix 
 * @returns 
 */
export function flattenJson2(obj, prefix = '') {
    let flattened = {};
  
    for (let key in obj) {
      if (obj.hasOwnProperty(key)) {
        let propName = prefix ? prefix + '.' + key : key;
  
        if (typeof obj[key] === 'object' && obj[key] !== null) {
          let nested = flattenJson2(obj[key], propName);
          flattened = { ...flattened, ...nested };
        } else {
          flattened[propName] = obj[key];
        }
      }
    }
  
    return flattened;
}
  
  
