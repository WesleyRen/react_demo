/**
 * Generated by github copilot.
 * @param {object} o 
 * @returns fattened json
 */
export function flattenJson(o) {
    var result = {};
    function recurse(cur, prop) {
        if (Object(cur) !== cur) {
            result[prop] = cur;
        } else if (Array.isArray(cur)) {
            for (var i = 0, l = cur.length; i < l; i++) {
                recurse(cur[i], prop + "[" + i + "]");
            }
        if (l === 0) {
            result[prop] = [];
        }
        } else {
            var isEmpty = true;
            for (var p in cur) {
                isEmpty = false;
                recurse(cur[p], prop ? prop + "." + p : p);
            }
            if (isEmpty) {
                result[prop] = {};
            }
        }
    }
    recurse(o, "");
    return result;
}
/**
 * Generated by chatGPT.
 * @param {*} obj 
 * @param {*} prefix 
 * @returns 
 */
export function flattenObject(obj, prefix = '') {
    let flattened = {};
  
    for (let key in obj) {
      if (obj.hasOwnProperty(key)) {
        let propName = prefix ? prefix + '.' + key : key;
  
        if (typeof obj[key] === 'object' && obj[key] !== null) {
          let nested = flattenObject(obj[key], propName);
          flattened = { ...flattened, ...nested };
        } else {
          flattened[propName] = obj[key];
        }
      }
    }
  
    return flattened;
}
  
  
export function unflattenJson(o) {
    if (Object(o) !== o || Array.isArray(o))
        return o;
    var regex = /\.?([^.\[\]]+)|\[(\d+)\]/g,
        resultholder = {};
    for (var p in o) {
        var cur = resultholder,
            prop = "",
            m;
        while (m = regex.exec(p)) {
            cur = cur[prop] || (cur[prop] = (m[2] ? [] : {}));
            prop = m[2] || m[1];
        }
        cur[prop] = o[p];
    }
    return resultholder[""] || resultholder;
}

export function unflattenObject(flatObject) {
    const result = {};
  
    for (let key in flatObject) {
      if (flatObject.hasOwnProperty(key)) {
        const value = flatObject[key];
        let currentObject = result;
        const keys = key.split('.');
  
        for (let i = 0; i < keys.length - 1; i++) {
          const currentKey = keys[i];
          if (!currentObject.hasOwnProperty(currentKey)) {
            currentObject[currentKey] = {};
          }
          currentObject = currentObject[currentKey];
        }
  
        currentObject[keys[keys.length - 1]] = value;
      }
    }
  
    return result;
  }
  
  